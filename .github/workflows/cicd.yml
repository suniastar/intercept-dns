name: CI/CD

on: [ push, pull_request, workflow_dispatch ]

env:
  DOCKERHUB_USERNAME: suniastar

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ darwin, freebsd, linux, netbsd, openbsd, windows ]
        arch: [ 386, amd64 ]
        exclude:
          - os: darwin
            arch: 386
        include:
          - os: linux
            arch: arm
          - os: linux
            arch: arm64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0

      - name: Setup Go Environment
        uses: actions/setup-go@v2.1.4

      - name: Install dependencies
        run: go get

      - name: Install Gox Cross-Compiler
        run: go get github.com/mitchellh/gox && go install github.com/mitchellh/gox

      - name: Build bineries
        run: CGO_ENABLED=0 $(go env GOPATH)/bin/gox -verbose -osarch="${{ matrix.os }}/${{ matrix.arch }}" -ldflags="-s -w" -output="bin/{{.Dir}}-{{.OS}}-{{.Arch}}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: intercept-dns-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/intercept-dns-*

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: build

    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            base: amd64
          - os: linux
            arch: arm
            base: arm32v7
          - os: linux
            arch: arm64
            base: arm64v8

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v2.4.0

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: intercept-dns-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/

      - name: Build Docker image
        run: |
          mv bin/intercept-dns-* bin/intercept-dns
          chmod 755 bin/intercept-dns
          docker pull ${{ matrix.base }}/alpine:latest
          docker build \
            --pull \
            --no-cache \
            --force-rm \
            --file Dockerfile \
            --build-arg ARCH=${{ matrix.base }} \
            --label "org.opencontainers.image.created=$(date --rfc-3339=seconds)" \
            --label "org.opencontainers.image.authors=Frederik Enste <frederik@fenste.de>" \
            --label "org.opencontainers.image.url=https://github.com/suniastar/intercept-dns" \
            --label "org.opencontainers.image.source=https://github.com/suniastar/intercept-dns.git" \
            --label "org.opencontainers.image.version=$(cat version)" \
            --label "org.opencontainers.image.vendor=${{ env.DOCKERHUB_USERNAME }}" \
            --label "org.opencontainers.image.title=Intercept-DNS" \
            --label "org.opencontainers.image.base.name=${{ matrix.base }}/alpine:latest" \
            --label  org.opencontainers.image.base.digest=$(docker image inspect ${{ matrix.base }}/alpine:latest | grep -o 'Id": "[a-z0-9:]*' | sed 's/Id": "//g') \
            --tag "${{ env.DOCKERHUB_USERNAME }}/intercept-dns:$(cat version)-${{ matrix.os }}-${{ matrix.base }}" \
            .
      - name: Retag amd64 as latest
        if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}
        run: docker tag "${{ env.DOCKERHUB_USERNAME }}/intercept-dns:$(cat version)-${{ matrix.os }}-${{ matrix.base }}" "${{ env.DOCKERHUB_USERNAME }}/intercept-dns:latest"

      - name: Upload Docker image
        run: docker push "${{ env.DOCKERHUB_USERNAME }}/intercept-dns:$(cat version)-${{ matrix.os }}-${{ matrix.base }}"

      - name: Upload latest Docker image
        if: ${{ matrix.os == 'linux' && matrix.arch == 'amd64' }}
        run: docker push "${{ env.DOCKERHUB_USERNAME }}/intercept-dns:latest"